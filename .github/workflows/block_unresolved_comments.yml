name: Check for BLOCKED Comments

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]
  pull_request_review:
    types: [submitted, edited, dismissed]

jobs:
  check-blocked-comments:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Check for unresolved BLOCKED comments
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node <<EOF
          const fetch = require('node-fetch');

          const graphqlQuery = `
          query ($owner: String!, $repo: String!, $pullNumber: Int!) {
            repository(owner: $owner, name: $repo) {
              pullRequest(number: $pullNumber) {
                reviews(first: 100) {
                  nodes {
                    comments(first: 100) {
                      nodes {
                        body
                        isMinimized
                        minimizedReason
                      }
                    }
                  }
                }
              }
            }
          }`;

          async function checkBlockedComments() {
            const owner = "${{ github.repository_owner }}";
            const repo = "${{ github.event.repository.name }}";
            const pullNumber = ${{ github.event.pull_request.number }};

            const response = await fetch('https://api.github.com/graphql', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${process.env.GITHUB_TOKEN}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                query: graphqlQuery,
                variables: { owner, repo, pullNumber },
              }),
            });

            const data = await response.json();

            const reviews = data.data.repository.pullRequest.reviews.nodes;
            let hasBlocked = false;

            reviews.forEach(review => {
              review.comments.nodes.forEach(comment => {
                if (
                  comment.body.includes("[BLOCKED]") &&
                  (!comment.isMinimized || comment.minimizedReason !== "resolved")
                ) {
                  console.log(`Unresolved [BLOCKED] comment found: ${comment.body}`);
                  hasBlocked = true;
                }
              });
            });

            if (hasBlocked) {
              console.error("There are unresolved [BLOCKED] comments!");
              process.exit(1);
            } else {
              console.log("No unresolved [BLOCKED] comments found.");
            }
          }

          checkBlockedComments().catch(err => {
            console.error("Error:", err);
            process.exit(1);
          });
          EOF
